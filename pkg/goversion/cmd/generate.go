package cmd

import (
	"context"
	"errors"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"reflect"
	"strconv"
	"strings"
	"text/template"

	"github.com/erwinvaneyk/cobras"
	"github.com/spf13/cobra"

	"github.com/erwinvaneyk/goversion"
)

type GenerateOptions struct {
	DisableInit                   bool
	GeneratedFilePath             string
	GoVersionPackage              string
	GeneratedFilePackageName      string
	GoversionVersion              string
	GeneratedVersionPrivateFields string
	GeneratedVersionSetFields     string
}

func NewCmdGenerate() *cobra.Command {
	opts := &GenerateOptions{
		GoVersionPackage:         goversion.PackageName,
		GeneratedFilePath:        "",
		GeneratedFilePackageName: "main",
		GoversionVersion:         goversion.Get().Version,
	}

	cmd := &cobra.Command{
		Use:   "generate",
		Short: "",
		Run:   cobras.Run(opts),
	}

	cmd.Flags().StringVarP(&opts.GeneratedFilePath, "output", "o", opts.GeneratedFilePath, "Where to write the generated version file to. If none or '-' is provided, it will be written to stdout.")
	cmd.Flags().StringVarP(&opts.GeneratedFilePackageName, "pkg", "p", opts.GeneratedFilePackageName, "The package name of the generated file.")
	cmd.Flags().StringVar(&opts.GoVersionPackage, "goversion", opts.GoVersionPackage, "The package path to use to import the goversion API.")
	cmd.Flags().BoolVar(&opts.DisableInit, "disable-init", opts.DisableInit, "If set, the init function is not generated.")
	return cmd
}

func (o *GenerateOptions) Complete(cmd *cobra.Command, args []string) error {
	versionInfoVal := reflect.ValueOf(goversion.Get()).Type()
	var longestFieldNameLen int
	for i := 0; i < versionInfoVal.NumField(); i++ {
		nameLen := len(versionInfoVal.Field(i).Name)
		if nameLen > longestFieldNameLen {
			longestFieldNameLen = nameLen
		}
	}
	for i := 0; i < versionInfoVal.NumField(); i++ {
		fieldType := versionInfoVal.Field(i)
		lowerCaseFieldName := strings.ToLower(fieldType.Name[0:1]) + fieldType.Name[1:]
		o.GeneratedVersionPrivateFields += fmt.Sprintf("\t%-"+strconv.Itoa(longestFieldNameLen)+"s %s\n", lowerCaseFieldName, fieldType.Type)
		o.GeneratedVersionSetFields += fmt.Sprintf("\t\t%-"+strconv.Itoa(longestFieldNameLen+1)+"s %s,\n", fieldType.Name+":", lowerCaseFieldName)
	}
	o.GeneratedVersionPrivateFields = strings.TrimSpace(o.GeneratedVersionPrivateFields)
	o.GeneratedVersionSetFields = strings.TrimSpace(o.GeneratedVersionSetFields)

	return nil
}

func (o *GenerateOptions) Validate() error {
	if o.GeneratedFilePackageName == "" {
		return errors.New("a package name (--pkg, -p) is required")
	}
	return nil
}

func (o *GenerateOptions) Run(ctx context.Context) error {
	var writesToFile bool
	var writer io.Writer
	if o.GeneratedFilePath == "" || o.GeneratedFilePath == "-" {
		writer = os.Stdout
	} else {
		fd, err := os.Create(o.GeneratedFilePath)
		if err != nil {
			return err
		}
		writer = fd
		writesToFile = true
		defer fd.Close()
	}

	err := versionFieldsTemplate.Execute(writer, o)
	if err != nil {
		return err
	}

	if writesToFile {
		absGeneratedFilePath, err := filepath.Abs(o.GeneratedFilePath)
		if err != nil {
			absGeneratedFilePath = o.GeneratedFilePath
		}
		log.Printf("Generated goversion-fields file: '%s'", absGeneratedFilePath)
	}

	return nil
}

var versionFieldsTemplate = template.Must(template.New("version.gen.go").Parse(`// Generated by goversion {{.GoversionVersion}}
package {{.GeneratedFilePackageName}}
{{ if .GoVersionPackage}}
import goversion "{{.GoVersionPackage}}"
{{end}}
// The following variables should be filled with goversion ldflags
var (
	{{.GeneratedVersionPrivateFields}}
)

{{if not .DisableInit}}func init() {
	{{ if .GoVersionPackage}}goversion.{{end}}Set({{ if .GoVersionPackage}}goversion.{{end}}Info{
		{{.GeneratedVersionSetFields}}
	})
}
{{end}}`))
