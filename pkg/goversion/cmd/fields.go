package cmd

import (
	"context"
	"io"
	"log"
	"os"
	"path/filepath"
	"text/template"

	"github.com/erwinvaneyk/cobras"
	"github.com/spf13/cobra"

	goversion "github.com/erwinvaneyk/go-version"
)

type FieldsOptions struct {
	DisableInit              bool
	GeneratedFilePath        string
	GoVersionPackage         string
	GeneratedFilePackageName string
	GoversionVersion         string
}

func NewCmdFields() *cobra.Command {
	opts := &FieldsOptions{
		GoVersionPackage:         goversion.PackageName,
		GeneratedFilePath:        "",
		GeneratedFilePackageName: "main",
		GoversionVersion:         goversion.Get().Version,
	}

	cmd := &cobra.Command{
		Use: "fields",
		Run: cobras.Run(opts),
	}

	cmd.Flags().StringVarP(&opts.GeneratedFilePath, "output", "o", opts.GeneratedFilePath, "")
	cmd.Flags().StringVarP(&opts.GeneratedFilePackageName, "pkg", "p", opts.GeneratedFilePackageName, "")
	cmd.Flags().StringVar(&opts.GoVersionPackage, "goversion", opts.GoVersionPackage, "")
	cmd.Flags().BoolVar(&opts.DisableInit, "disable-init", opts.DisableInit, "If set, the init function is not generated.")
	return cmd
}

func (o *FieldsOptions) Complete(cmd *cobra.Command, args []string) error {
	return nil
}

func (o *FieldsOptions) Validate() error {
	return nil
}

func (o *FieldsOptions) Run(ctx context.Context) error {
	var writesToFile bool
	var writer io.Writer
	if o.GeneratedFilePath == "" || o.GeneratedFilePath == "-" {
		writer = os.Stdout
	} else {
		fd, err := os.Create(o.GeneratedFilePath)
		if err != nil {
			return err
		}
		writer = fd
		writesToFile = true
		defer fd.Close()
	}

	err := versionFieldsTemplate.Execute(writer, o)
	if err != nil {
		return err
	}

	if writesToFile {
		absGeneratedFilePath, err := filepath.Abs(o.GeneratedFilePath)
		if err != nil {
			absGeneratedFilePath = o.GeneratedFilePath
		}
		log.Printf("Generated goversion-fields file: '%s'", absGeneratedFilePath)
	}

	return nil
}

var versionFieldsTemplate = template.Must(template.New("version.gen.go").Parse(`// Generated by goversion {{.GoversionVersion}}
package {{.GeneratedFilePackageName}}
{{ if .GoVersionPackage}}
import goversion "{{.GoVersionPackage}}"
{{end}}
// The following variables should be filled with goversion ldflags
var (
	buildBy           string
	buildDate         string
	buildPlatformArch string
	buildPlatformOS   string
	gitCommit         string
    gitTreeState      string
	goVersion         string
	version           string
)

{{if not .DisableInit}}func init() {
	{{ if .GoVersionPackage}}goversion.{{end}}Set({{ if .GoVersionPackage}}goversion.{{end}}Info{
		BuildBy:           buildBy,
		BuildDate:         buildDate,
		BuildPlatformArch: buildPlatformArch,
		BuildPlatformOS:   buildPlatformOS,
		GitCommit:         gitCommit,
        GitTreeState:      gitTreeState,
		GoVersion:         goVersion,
		Version:           version,
	})
}
{{end}}`))
